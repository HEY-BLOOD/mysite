"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# initialize env
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False))

# reading .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# Application definition
INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'article.apps.ArticleConfig',  # 注册 article 应用
    'userprofile.apps.UserprofileConfig',  # 用户管理应用
    'password_reset',  # 密码重置
    'comment.apps.CommentConfig',  # 评论应用
    'taggit',  # django-taggit 标签扩展
    'imagekit',  # django-imagekit 对模型的图片字段进行处理
    'ckeditor',  # django-ckeditor 富文本编辑器
    'mptt',  # django-mptt 多级评论扩展
    'notifications',  # django-notifications-hq 消息通知扩展（小红点）
    'notice',  # 消息通知的未读与已读
    # allauth 启动必须项
    'django.contrib.auth',
    'django.contrib.messages',
    'django.contrib.sites',
    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 可添加需要的第三方登录
    'allauth.socialaccount.providers.github',
    # 'allauth.socialaccount.providers.weibo',
    # django-mdeditor 编辑器
    'mdeditor',
]

# 设置站点
SITE_ID = 1

# 登录成功后重定向地址
LOGIN_REDIRECT_URL = '/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # allauth 启动必须项
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Django 后台可独立于 allauth 登录
    'django.contrib.auth.backends.ModelBackend',
    # 配置 allauth 独有的认证方法，如 email 登录
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# 使用 MySQL数据库
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
#         'NAME': env('NAME'),  # 数据库名，先前创建的
#         'USER': env('USER'),  # 用户名，可以自己创建用户
#         'PASSWORD': env('PASSWORD'),  # 密码
#         'HOST': env('HOST'),  # mysql服务所在的主机ip
#         'PORT': '3306',  # mysql服务端口
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# django-ckeditor 富文本编辑器配置
CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    'default': {
        # 编辑器宽度自适应
        'width':
        'auto',
        'height':
        '250px',
        # tab键转换空格数
        'tabSpaces':
        4,
        # 工具栏风格
        'toolbar':
        'Custom',
        # 工具栏按钮，在 toolbar_Custom中定义需要使用的功能模块
        'toolbar_Custom': [
            # 表情 代码块
            ['Smiley', 'CodeSnippet'],
            # 字体风格
            ['Bold', 'Italic', 'Underline', 'RemoveFormat', 'Blockquote'],
            # 字体颜色
            ['TextColor', 'BGColor'],
            # 链接
            ['Link', 'Unlink'],
            # 列表
            ['NumberedList', 'BulletedList'],
            # 最大化
            ['Maximize']
        ],
        # 加入代码块插件，代码块功能是编辑器自带的插件，需要在extraPlugins中指定使用。添加 Prism 相关插件
        'extraPlugins':
        ','.join(['codesnippet', 'prism', 'widget', 'lineutils']),
    }
}

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'WARNING',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter': 'verbose',
            # 'class': 'logging.FileHandler',  # 原来的
            'class': 'logging.handlers.TimedRotatingFileHandler',  # Python内置的随时间分割日志文件的模块
            'when': 'midnight',  # 分割时间为凌晨
            'backupCount': 30,  # 日志文件保存日期为30天
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# 默认语言 en-us
LANGUAGE_CODE = 'zh-hans'

# 设置上海的时区，之前的是 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'

# 指定静态文件的存放路径
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# 静态文件收集目录
STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

# 媒体文件地址
MEDIA_URL = '/media/'

# 媒体文件存放位置
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# SMTP服务器配置，以 QQ邮箱为例（不要上传到开源平台）
EMAIL_HOST = 'smtp.qq.com'
# 改为自己的邮箱名
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# 邮箱密码（授权码）
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
# 发送邮件的端口，不通请尝试 465 或 587 端口。
EMAIL_PORT = env('EMAIL_PORT')
# 是否使用 TLS
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
# 默认的发件人
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

# simpleui 设置

# 首页配置
# SIMPLEUI_HOME_PAGE = 'http://127.0.0.1:8000'
# 首页标题
# SIMPLEUI_HOME_TITLE = '我的博客'
# 首页图标,支持element-ui的图标和fontawesome的图标
# SIMPLEUI_HOME_ICON = 'el-icon-date'

# 设置simpleui 点击首页图标跳转的地址
SIMPLEUI_INDEX = 'http://127.0.0.1:8000'

# 首页显示服务器、python、django、simpleui相关信息，默认True
# SIMPLEUI_HOME_INFO = False

# 首页显示快速操作，默认True
# SIMPLEUI_HOME_QUICK = False

# 首页显示最近动作，默认True
# SIMPLEUI_HOME_ACTION = False

# 自定义SIMPLEUI的Logo
# SIMPLEUI_LOGO = 'https://avatars2.githubusercontent.com/u/13655483?s=60&v=4'

# 登录页粒子动画，默认开启，False关闭
# SIMPLEUI_LOGIN_PARTICLES = False

# 让simpleui 不要收集相关信息
# SIMPLEUI_ANALYSIS = True

# 自定义simpleui 菜单
SIMPLEUI_CONFIG = {
    # 在自定义菜单的基础上保留系统模块
    'system_keep':
    True,
    'menus': [
        {
            'name': 'Simpleui',
            'icon': 'fas fa-code',
            'url': 'https://gitee.com/tompeppa/simpleui'
        },
        # {
        #     'app': 'auth',
        #     'name': '权限认证',
        #     'icon': 'fas fa-user-shield',
        #     'models': [{
        #         'name': '用户',
        #         'icon': 'fa fa-user',
        #         'url': 'auth/user/'
        #     }]
        # },
        # {
        #     'name':
        #     '测试',
        #     'icon':
        #     'fa fa-file',
        #     'models': [{
        #         'name': 'Baidu',
        #         'url': 'http://baidu.com',
        #         'icon': 'far fa-surprise'
        #     }, {
        #         'name': '内网穿透',
        #         'url': 'https://www.wezoz.com',
        #         'icon': 'fab fa-github'
        #     }, {
        #         'name': '内网穿透',
        #         'url': 'https://www.wezoz.com',
        #         'icon': 'fab fa-github'
        #     }, {
        #         'name': '登录页嵌套测试',
        #         'url': '/login'
        #     }]
        # }
    ]
}

# 是否显示默认图标，默认=True
# SIMPLEUI_DEFAULT_ICON = False

# 指定simpleui 是否以脱机模式加载静态资源，为True的时候将默认从本地读取所有资源，即使没有联网一样可以。适合内网项目
# 不填该项或者为False的时候，默认从第三方的cdn获取
# SIMPLEUI_STATIC_OFFLINE = True

# mdeditor编辑器配置
MDEDITOR_CONFIGS = {
    'default': {
        'width':
        '100% ',  # Custom edit box width
        'heigth':
        500,  # Custom edit box height
        'toolbar': [
            "undo",
            "redo",
            "|",
            "bold",
            "del",
            "italic",
            "quote",
            "|",  # "ucwords", "uppercase", "lowercase",
            "h1",
            "h2",
            "h3",
            "h5",
            "h6",
            "|",
            "list-ul",
            "list-ol",
            "hr",
            "|",
            "link",
            "reference-link",
            "image",
            "code",
            "preformatted-text",
            "code-block",
            "table",
            "datetime",
            "emoji",
            "html-entities",
            "pagebreak",
            "goto-line",
            "|",
            "help",
            "info",
            "|",
            "preview",
            "watch",
            "fullscreen"
        ],  # custom edit box toolbar 
        'upload_image_formats': ["jpg", "jpeg", "gif", "png", "bmp", "webp"],  # image upload format type
        'image_folder':
        'editor',  # image save the folder name
        'theme':
        'default',  # edit box theme, dark / default
        'preview_theme':
        'default',  # Preview area theme, dark / default
        'editor_theme':
        'default',  # edit area theme, pastel-on-dark / default
        'toolbar_autofixed':
        True,  # Whether the toolbar capitals
        'search_replace':
        True,  # Whether to open the search for replacement
        'emoji':
        True,  # whether to open the expression function
        'tex':
        True,  # whether to open the tex chart function
        'flow_chart':
        True,  # whether to open the flow chart function
        'sequence':
        True,  # Whether to open the sequence diagram function
        'watch':
        True,  # Live preview
        'lineWrapping':
        False,  # lineWrapping
        'lineNumbers':
        True,  # lineNumbers
        'language':
        'zh'  # zh / en / es 
    }
}
